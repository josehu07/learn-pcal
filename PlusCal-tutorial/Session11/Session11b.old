----------------------------- MODULE Session11b ----------------------------
(***************************************************************************)
(* This module describes the Alternating Bit protocol, omitting liveness   *)
(* requirements.                                                           *)
(***************************************************************************)
EXTENDS Integers, Sequences

CONSTANT Data

RemoveElt(i, seq) == [j \in 1..(Len(seq)-1) |-> 
                       IF j < i THEN seq[j] ELSE seq[j+1]]

Msgs == [data: Data, bit : {0,1}]

(*--algorithm AB
variable AVar \in {msg \in Msgs: msg.bit = 1}, BVar = AVar,
         AtoB = << >>, BtoA = << >>;

process A = "A"
begin
    a: while TRUE do
        either
            AtoB := Append(AtoB, AVar);
        or
            await BtoA /= << >>;
            if Head(BtoA) = AVar.bit then
                with d \in Data do
                    AVar := [data |-> d, bit |-> 1 - AVar.bit];
                end with;
            end if;
            BtoA := Tail(BtoA);
        end either;
    end while;
end process;

process B = "B"
begin
    b: while TRUE do
        either
            BtoA := Append(BtoA, BVar.bit);
        or
            await AtoB /= << >>;
            if Head(AtoB).bit /= BVar.bit then
                BVar := Head(AtoB);
            end if;
            AtoB := Tail(AtoB);
        end either;
    end while;
end process;

process LoseMsgs = "L"
begin
    c: while TRUE do
        either
            with i \in 1..Len(AtoB) do
                AtoB := RemoveElt(i, AtoB);
            end with;
        or
            with i \in 1..Len(BtoA) do 
                BtoA := RemoveElt(i, BtoA);
            end with;
        end either;
    end while;
end process;
end algorithm; *)

\* BEGIN TRANSLATION (chksum(pcal) = "f11e91e8" /\ chksum(tla) = "3a0f82d7")
VARIABLES AVar, BVar, AtoB, BtoA

vars == << AVar, BVar, AtoB, BtoA >>

ProcSet == {"A"} \cup {"B"} \cup {"L"}

Init == (* Global variables *)
        /\ AVar \in {msg \in Msgs: msg.bit = 1}
        /\ BVar = AVar
        /\ AtoB = << >>
        /\ BtoA = << >>

A == /\ \/ /\ AtoB' = Append(AtoB, AVar)
           /\ UNCHANGED <<AVar, BtoA>>
        \/ /\ BtoA /= << >>
           /\ IF Head(BtoA) = AVar.bit
                 THEN /\ \E d \in Data:
                           AVar' = [data |-> d, bit |-> 1 - AVar.bit]
                 ELSE /\ TRUE
                      /\ AVar' = AVar
           /\ BtoA' = Tail(BtoA)
           /\ AtoB' = AtoB
     /\ BVar' = BVar

B == /\ \/ /\ BtoA' = Append(BtoA, BVar.bit)
           /\ UNCHANGED <<BVar, AtoB>>
        \/ /\ AtoB /= << >>
           /\ IF Head(AtoB).bit /= BVar.bit
                 THEN /\ BVar' = Head(AtoB)
                 ELSE /\ TRUE
                      /\ BVar' = BVar
           /\ AtoB' = Tail(AtoB)
           /\ BtoA' = BtoA
     /\ AVar' = AVar

LoseMsgs == /\ \/ /\ \E i \in 1..Len(AtoB):
                       AtoB' = RemoveElt(i, AtoB)
                  /\ BtoA' = BtoA
               \/ /\ \E i \in 1..Len(BtoA):
                       BtoA' = RemoveElt(i, BtoA)
                  /\ AtoB' = AtoB
            /\ UNCHANGED << AVar, BVar >>

Next == A \/ B \/ LoseMsgs

Spec == Init /\ [][Next]_vars

\* END TRANSLATION

=============================================================================
\* Modification History
\* Last modified Wed Nov 24 07:22:31 PST 2021 by lamport
\* Created Wed Mar 25 11:53:40 PDT 2015 by lamport
